;;-*-coding: utf-8;-*-
(define-abbrev-table 'global-abbrev-table
  '(
    ("abie" "argmax_bool_inner_eq" nil :count 1)
    ("altr" "all_transitions" nil :count 6)
    ("altrh" "all_transitions_helper" nil :count 6)
    ("altrs" "all_transitions_set" nil :count 1)
    ("altrsh" "all_transitions_set_helper" nil :count 1)
    ("ape" "apply_parity_equation" nil :count 54)
    ("apes" "apply_parity_equations" nil :count 48)
    ("app" "â§º" nil :count 29)
    ("appendconv" "LIST_EQ_SIMP_CONV" nil :count 3)
    ("ast" "assume_tac" nil :count 40)
    ("ath" "all_transitions_helper" nil :count 5)
    ("ats" "all_transitions_set" nil :count 9)
    ("atsh" "all_transitions_set_helper" nil :count 7)
    ("bfmw" "bcjr_forward_metric_wfm" nil :count 3)
    ("bo" "best_origin" nil :count 48)
    ("boc" "best_origin_candidate" nil :count 2)
    ("bos" "best_origin_slow" nil :count 22)
    ("bp" "bsc_probability" nil :count 2)
    ("cas" "Cases_on" nil :count 217)
    ("cm" "calculate_message" nil :count 3)
    ("cms" "calculate_messages_step" nil :count 15)
    ("cpe" "convolve_parity_equation" nil :count 12)
    ("cpes" "convolve_parity_equations" nil :count 40)
    ("cpesp" "convolve_parity_equations_padded" nil :count 7)
    ("ctp" "code_to_path" nil :count 136)
    ("ctph" "code_to_path_helper" nil :count 86)
    ("de" "destination" nil :count 60)
    ("dest" "destination" nil :count 3)
    ("dfn" "Definition" nil :count 1)
    ("dne" "donotexpand" nil :count 13)
    ("dnet" "donotexpand_tac" nil :count 1)
    ("dptc" "decode_parallel_turbo_code" nil :count 1)
    ("dpur" "DEP_PURE_ONCE_REWRITE_TAC" nil :count 224)
    ("dt" "disch_tac" nil :count 1)
    ("ebps" "ecc_bsc_prob_space" nil :count 220)
    ("eibtv" "event_input_bit_takes_value" nil :count 25)
    ("eisp" "event_input_state_parity" nil :count 16)
    ("eissw" "event_input_string_starts_with" nil :count 18)
    ("eistw" "event_input_string_starts_with" nil :count 3)
    ("eitv" "eitv" nil :count 2)
    ("eitvarsicie" "event_input_takes_value_and_received_string_is_correct_is_event" nil :count 2)
    ("eitvarsicnp" "event_input_takes_value_and_received_string_is_correct_nonzero_prob" nil :count 2)
    ("eo" "empty_output" nil :count 5)
    ("epbtv" "epbtv" nil :count 2)
    ("eps" "ecc_prob_space" nil :count 1)
    ("erbtv" "event_received_bit_takes_value" nil :count 20)
    ("erpe" "encode_recursive_parity_equation" nil :count 33)
    ("erpeqssq" "encode_recursive_parity_equation_state_sequence" nil :count 1)
    ("erpes" "encode_recursive_parity_equation_state" nil :count 8)
    ("erpessq" "encode_recursive_parity_equation_state_sequence" nil :count 41)
    ("erpews" "encode_recursive_parity_equation_with_systematic" nil :count 9)
    ("erpezt" "encode_recursive_parity_equation_zero_tailed" nil :count 2)
    ("ersic" "event_received_string_is_correct" nil :count 11)
    ("erssw" "event_received_string_starts_with" nil :count 16)
    ("erstv" "event_received_string_takes_value" nil :count 45)
    ("esbtv" "event_sent_bit_takes_value" nil :count 37)
    ("esitv" "event_single_input_takes_value" nil :count 3)
    ("esm" "example_state_machine" nil :count 5)
    ("espbtv" "event_srcc_parity_bit_takes_value" nil :count 5)
    ("espssw" "event_srcc_parity_string_starts_with" nil :count 6)
    ("espstv" "event_srcc_parity_string_takes_value" nil :count 2)
    ("esrbtv" "event_single_received_bit_takes_value" nil :count 2)
    ("essqsw" "event_state_sequence_starts_with" nil :count 22)
    ("essqtv" "event_state_sequence_takes_value" nil :count 37)
    ("esssw" "event_sent_string_starts_with" nil :count 38)
    ("esstv" "event_sent_string_takes_value" nil :count 57)
    ("estv" "event_state_takes_value" nil :count 52)
    ("et" "EVAL_TAC" nil :count 6)
    ("eu" "event_universal" nil :count 13)
    ("fa" "first_assum" nil :count 1)
    ("fae" "fg_add_edge" nil :count 9)
    ("faeffn" "fg_add_edges_for_function_node" nil :count 9)
    ("faeffn0" "fg_add_edges_for_function_node0" nil :count 30)
    ("faefn" "fg_add_edges_for_function_node" nil :count 3)
    ("fafn" "fg_add_function_node" nil :count 15)
    ("fafn0" "fg_add_function_node0" nil :count 10)
    ("fan" "fsgAddNode" nil :count 27)
    ("fanvn" "fg_add_n_variable_nodes" nil :count 10)
    ("favafn" "fg_add_variable_and_function_nodes" nil :count 3)
    ("favn" "fg_add_variable_node" nil :count 20)
    ("favn0" "fg_add_variable_node0" nil :count 10)
    ("fe" "fg_empty" nil :count 4)
    ("fg'" "factor_graph" nil :count 1)
    ("fga" "fg_get_adjacent" nil :count 5)
    ("fgaafn" "fg_get_adjacent_adjacent_function_nodes" nil :count 4)
    ("fgaafnnd" "fg_get_adjacent_adjacent_function_nodes_no_duplicates" nil :count 2)
    ("fgadfn" "fg_get_adjacent_function_nodes" nil :count 1)
    ("fgafn" "fg_get_adjacent_function_nodes" nil :count 5)
    ("fgafnve" "fg_get_adjacent_function_nodes_via_edges" nil :count 5)
    ("fgan" "factor_graph_add_node" nil :count 1)
    ("fgavn" "fg_get_adjacent_variable_nodes" nil :count 5)
    ("fgavnve" "fg_get_adjacent_variable_nodes_via_edges" nil :count 3)
    ("fm" "function_map" nil :count 3)
    ("fs" "from_state" nil :count 10)
    ("funo" "function_nodes" nil :count 19)
    ("fw" "fixwidth" nil :count 3)
    ("fxa" "first_x_assum" nil :count 1)
    ("gbe" "gen_bipartite_ea" nil :count 34)
    ("gbfs" "get_better_final_state" nil :count 7)
    ("gbo" "get_better_origin" nil :count 19)
    ("gen_partite_ea" "gpe" nil :count 0)
    ("gene" "get_every_nth_element" nil :count 4)
    ("gne" "get_num_errors" nil :count 60)
    ("gneas" "get_num_errors_after_step" nil :count 1)
    ("gneass" "get_num_errors_after_step_slow" nil :count 30)
    ("gp" "gen_partite" nil :count 7)
    ("gpe" "gen_partite_ea" nil :count 15)
    ("gt" "greater_than" nil :count 4)
    ("hadi" "hamming_distance" nil :count 18)
    ("hd" "hd" nil :count 32)
    ("ia" "inargmin" nil :count 47)
    ("ia2" "inargmin2" nil :count 11)
    ("iec" "ith_eq_codes" nil :count 5)
    ("iev" "is_event" nil :count 24)
    ("ifn" "is_function_node" nil :count 7)
    ("il" "inle" nil :count 1)
    ("in" "in" nil :count 446)
    ("ina" "inargmin" nil :count 6)
    ("ina2" "inargmin2" nil :count 6)
    ("ind" "Induct_on" nil :count 172)
    ("infty" "infty" nil :count 59)
    ("inp" "input" nil :count 6)
    ("iobmd" "is_optimal_blockwise_map_decoding" nil :count 6)
    ("iow" "ith_output_window" nil :count 34)
    ("ip" "inplus" nil :count 2)
    ("ips" "is_prob_space" nil :count 34)
    ("ir" "is_reachable" nil :count 57)
    ("ispv" "input_state_parity_valid" nil :count 16)
    ("itn" "infnum_to_num" nil :count 16)
    ("iv" "is_valid" nil :count 29)
    ("iv'" "< m.num_states" nil :count 3)
    ("lnc" "length_n_codes" nil :count 64)
    ("lncups" "length_n_codes_uniform_prob_space" nil :count 40)
    ("lnss" "length_n_state_sequences" nil :count 12)
    ("lnvss" "length_n_valid_state_sequences" nil :count 6)
    ("lnvssq" "length_n_valid_state_sequences" nil :count 2)
    ("lt" "lt" nil :count 164)
    ("lxa" "last_x_assum" nil :count 8)
    ("maxdeg" "MAX_LIST (MAP LENGTH ps)" nil :count 58)
    ("maxdeg'" "maxdeg" nil :count 12)
    ("maxdegg" "maxdeg" nil :count 3)
    ("md" "message_domain" nil :count 12)
    ("mdb" "map_decoder_bitwise" nil :count 10)
    ("mdbs" "map_decoder_bitwise_sent" nil :count 1)
    ("mdet" "MEM_DOEXPAND_TAC" nil :count 1)
    ("mdne" "MEM_DONOTEXPAND" nil :count 2)
    ("mdnet" "MEM_DONOTEXPAND_TAC" nil :count 1)
    ("mdz" "maxdeg_zero" nil :count 2)
    ("mpt" "mp_tac" nil :count 2)
    ("msoe" "mdr_summed_out_events" nil :count 21)
    ("msov" "mdr_summed_out_values" nil :count 24)
    ("msov2" "mdr_summed_out_values_2" nil :count 18)
    ("msovc" "mdr_summed_out_values_complete" nil :count 17)
    ("mt" "metis_tac" nil :count 66)
    ("nam" "namedCases_on " nil :count 1)
    ("ncas" "namedCases_on" nil :count 2)
    ("nd" "nodes" nil :count 41)
    ("ne" "num_errors" nil :count 32)
    ("nm" "new_msgs" nil :count 2)
    ("np" "nonzero_prob" nil :count 14)
    ("npd" "no_prev_data" nil :count 1)
    ("ol" "output_length" nil :count 32)
    ("ori" "origin" nil :count 7)
    ("pa" "pop_assum" nil :count 4)
    ("pe" "parity_equation" nil :count 8)
    ("pes" "parity_equations" nil :count 7)
    ("petsm" "parity_equations_to_state_machine" nil :count 106)
    ("pic" "path_is_connected" nil :count 122)
    ("pisgrs" "prob_input_string_given_received_string" nil :count 4)
    ("piv" "path_is_valid" nil :count 68)
    ("pivfs" "path_is_valid_from_state" nil :count 16)
    ("pivoe" "path_is_valid_or_empty" nil :count 9)
    ("pr" "pr" nil :count 5)
    ("pt" "prev_transition" nil :count 3)
    ("ptc" "path_to_code" nil :count 78)
    ("ptcap" "parallel_turbo_code_a_posteriori" nil :count 1)
    ("pur" "PURE_REWRITE_TAC" nil :count 155)
    ("puro" "PURE_ONCE_REWRITE_TAC" nil :count 17)
    ("qaat" "qmatch_asmsub_abbrev_tac" nil :count 39)
    ("qat" "qmatch_abbrev_tac" nil :count 9)
    ("qst" "qspecl_then" nil :count 1)
    ("qxa" "qpat_x_assum" nil :count 25)
    ("rdt" "rpt disch_tac" nil :count 3)
    ("rein" "relevant_input" nil :count 2)
    ("rgt" "rpt gen_tac" nil :count 2)
    ("ri" "restrict_input" nil :count 17)
    ("rpe" "recursive_parity_equations" nil :count 4)
    ("rpetsm" "recursive_parity_equations_to_state_machine" nil :count 1)
    ("rrpe" "run_recursive_parity_equation" nil :count 9)
    ("rsp" "rsp" nil :count 7)
    ("rst" "rpt strip_tac" nil :count 347)
    ("sitv" "single_input_takes_value" nil :count 1)
    ("sm" "state_machine" nil :count 7)
    ("snmf" "sym_noise_mass_func" nil :count 84)
    ("snps" "sym_noise_prob_space" nil :count 45)
    ("st" "strip_tac" nil :count 1)
    ("stti" "states_to_transition_input" nil :count 34)
    ("synd" "sym_noise_dist" nil :count 11)
    ("tf" "transition_fn" nil :count 102)
    ("ti" "transition_inverse" nil :count 16)
    ("tpe" "test_parity_equation" nil :count 3)
    ("tpe2" "test_parity_equation2" nil :count 2)
    ("tpei" "test_parity_equations_input" nil :count 3)
    ("tpes" "test_parity_equations" nil :count 11)
    ("tpesi" "test_parity_equations_input" nil :count 5)
    ("tror" "transition_origin" nil :count 5)
    ("ua" "unabbrev_all_tac" nil :count 3)
    ("ug" "underlying_graph" nil :count 90)
    ("una" "unabbrev_all_tac" nil :count 185)
    ("ups" "uniform_prob_space" nil :count 12)
    ("vcs" "vd_can_step" nil :count 40)
    ("vdde" "vd_decode" nil :count 7)
    ("vds" "vd_step" nil :count 3)
    ("vdts" "vd_decode_to_state" nil :count 84)
    ("vdtss" "vd_decode_to_state_slow" nil :count 4)
    ("ve" "vd_encode" nil :count 113)
    ("vefs" "vd_encode_from_state" nil :count 5)
    ("veh" "vd_encode_helper" nil :count 3)
    ("ves" "vd_encode_state" nil :count 118)
    ("vesfs" "vd_encode_state_from_state" nil :count 14)
    ("vesh" "vd_encode_state_helper" nil :count 29)
    ("vezt" "vd_encode_zero_tailed" nil :count 11)
    ("vfop" "vd_find_optimal_path" nil :count 23)
    ("vforp" "vd_find_optimal_reversed_path" nil :count 10)
    ("vic" "valid_inverse_codes" nil :count 4)
    ("vs" "vd_step" nil :count 52)
    ("vsb" "vd_step_back" nil :count 14)
    ("vsr" "vd_step_record" nil :count 27)
    ("vss" "valid_state_sequences" nil :count 3)
    ("vtn" "viterbi_trellis_node" nil :count 20)
    ("vtns" "viterbi_trellis_node_slow" nil :count 26)
    ("vtr" "viterbi_trellis_row" nil :count 57)
    ("wff" "wf_fg_fn" nil :count 4)
    ("wfm" "wfmachine" nil :count 9)
    ("wg" "wffactor_graph" nil :count 75)
    ("wm" "wfmachine" nil :count 64)
    ("wns" "wfm_num_states" nil :count 4)
    ("wol" "wfm_output_length" nil :count 5)
    ("wsm" "wf_state_machine" nil :count 4)
    ("wsmr" "wf_state_machine_REP" nil :count 1)
    ("wtf" "wfm_transition_fn" nil :count 6)
    ("wti" "wfm_transition_inverse" nil :count 5)
    ("ze" "zero_extend" nil :count 165)
   ))

(define-abbrev-table 'holscript-mode-abbrev-table
  '(
    ("qgat" "qmatch_goalsub_abbrev_tac" nil :count 187)
   ))

